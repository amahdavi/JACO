qplot 19

      expand 1.9
            echo $1 $2 $3 $4 $5 $6
      define TeX_strings 1
      define smoo 1
      lweight 2
      verbose 1
      define start 2
      define connect 0
      define cumul 0
      location 5000 32500 $gy1 $gy2
      if ('$1' != '0' && '$1' != '1' && '$1' != '2' && '$1' != '3' && '$1' != 'c' && '$1' != '4') { define start 1 }
      if ('$1' == '2' || '$1' == 'c') { define connect 1 }
      if ('$1' == '3') { define connect 1 define cumul 1}
      if (index('$2','eps') != -1) { define start 3 }
      define nfiles ($start-1)
      do i = $start,9 {

         if ($?$i) {

            define fn "$!$!i"
	    define g 0
            define p (index(string<"$!fn">,'+'))
            if ($p > -1) {
          	define g (substr(string<"$!fn">,$($p+1),1))
                echo g $g
	        define fn (substr(string<"$!fn">,0,$p))
		echo $fn
            }
            echo $fn
            data "$!fn"
            read x$i 1 
            read y$i 2 
            read e$i 3 
            read m$i 4
            read mm$i 5
            if ($cumul) {
               set esq = e$i*e$i
               do j=1,$(dimen(x$i)-1) {
                  set y$i[$j] = y$i[$j]+y$i[$($j-1)]
                  set m$i[$j] = m$i[$j]+m$i[$($j-1)]
                  set esq[$j] = esq[$j]+esq[$($j-1)]
               }
               set e$i = sqrt(esq)
            }
	    if (dimen(x$i) == 1) {
                if ($?xtit == 0) { define xtit "$!$!i"
                } else { if ($?ytit == 0) { define ytit "$!$!i"
                } else { if ($?topl == 0) { define topl "$!$!i"
                } else { if ($?dops == 0) { define dops "$!$!i" } } } }
            } else { 
              define nfiles ($nfiles+1) 
  	      define haserr$i (dimen(e$i) == dimen(x$i))
	      define hasm$i (dimen(m$i) == dimen(x$i))
	      define hasmm$i (dimen(mm$i) == dimen(x$i))
	      vecminmax y$i yl yh
	      vecminmax x$i xl xh
	      if ($start > 1) { 
               if ($1 > 0) {
                if ($i == $start ) {
                  vecminmax x$i xmin xmax
                  vecminmax y$i ymin ymax
                  echo $xmin $xmax $ymin $ymax fkdofkdofkdo
                  define xticks 10
                  define yticks 10
                  if ($xmax/$xmin < 10) { define xticks 5 }
                  if ($xmax/$xmin < 6) { define xticks 2 }
                  if ($ymax/$ymin < 10) { define yticks 5 }
                  if ($ymax/$ymin < 6) { define yticks 2 }
                }
                if ($1 == 4) { define smoo 2 }
                if (hasm$i) {
                   set pos = (x$i > 0)*(y$i > 0)*(m$i > 0)
                } else {
                   set pos = (x$i > 0)*(y$i > 0)
                }
		set x$i = lg(x$i)  if (pos)
#		if ($haserr$i) { set e$i = sqrt(vsmooth((e$i/(y$i*ln(10.)))**2,2)) }
		if ($haserr$i) { set e$i = (e$i/(y$i*ln(10.)))/sqrt($smoo) }
                set e$i = (e$i > 1 ? 1 : e$i)
		set y$i = lg(y$i) if (pos)
                set m$i = lg(m$i) if (pos)
                set mm$i = lg(mm$i) if (pos)
                ticksize -1 $xticks -1 $yticks
                #notation -2 2 -2 2
               }
	      } else { 
		  if ($yh/$yl > 10 && $yl > 0 && $xl > 0) {
                    set pos = (x$i > 0)*(y$i > 0)*(m$i > 0)
		    set x$i = lg(x$i) if (pos)
		    if ($haserr$i) { set e$i = e$i/(y$i*ln(10.)) }
		    set y$i = lg(y$i) if (pos)
		    if ($hasm$i) { set m$i = lg(m$i) if (pos) }
		  }
	      }
  	      verbose 1
	      if ($haserr$i) {
		set ye1 = y$i-e$i
		set ye2 = y$i+e$i
	      } else {
		set ye1 = 0.9*y$i
		set ye2 = 1.1*y$i
	      }
	      if ($i == $start) {
	       set bigx = x$i
	       set bigy = ye1 concat ye2 
 	      } else {
	       set bigx = bigx concat x$i
	       set bigy = bigy concat ye1 concat ye2
	      }
	      if ($hasm$i) { set bigy = bigy concat m$i }	       

         }
        }
      }
      if ($?dops) { device postencap $dops } else {
              device x11 -bg black -geometry 600x600
     }
      #window 10 1 1:5 1
      LOCATION $($gx1 + 2000) $gx2 $($gy1+1000) $gy2
      vecminmax bigx xl xh
      vecminmax bigy yl yh
      define xl ($xl-0.1*abs($xl))
      define xh ($xh+0.1*abs($xh))
      define yl ($yl-0.1*abs($yl))
      define yh ($yh+0.1*abs($yh))
      limits $xl $xh $yl $yh
      erase
      box 1 2 0 0
      #define xtit "R\,(Mpc)"
      #define ytit "\sigma_{||}\,(km/s)"
      echo $xtit $ytit
      if ($?xtit) { xlabel $xtit }
      if ($?ytit) { ylabel $ytit }
      if ($?topl) { toplabel $topl }


      do i = $start,$nfiles {

         if ($?$i) {

	     define j ($i-$start+3)
	     ptype $($j == 5 ? 9 : $i == 8 ? 9 : 3+($j % 3)) $($j > 5 ? 0 : 3)
             if ($connect) {
                set yyp = y$i+e$i
                set yym = y$i-e$i
                ctype red
                connect x$i yyp
                connect x$i yym
                ctype default
                set yyp = reverse(yyp)
                set xxx = reverse(x$i)
                set xxxx = x$i concat xxx
                set yyyy = yym concat yyp
                #shade $(($i-$start)*500+100) xxxx yyyy
             } else { 
               define l (dimen(x$i))
               set dimen(xa) = $l
               set dimen(xb) = $l
               set dimen(yy) = $l
               set dimen(ee) = $l
               set dimen(nn) = $l
               set xa[0] = x$i[0]
               set xb[0] = x$i[0]
               set yy[0] = y$i[0]
               set ee[0] = e$i[0]
               define n 0
               do k=1,$($l-1) {
                  set nn[$n] = 1
                  set xb[$n] = lg(0.5*(10**x$i[$($k-1)]+10**x$i[$k]))
                  if (y$i[$k] != y$i[$($k-1)]) {
                     define n ($n+1)
                     set xa[$n] = xb[$n-1]
                  }
                  echo $k $n
                  set yy[$n] = y$i[$k]
                  set ee[$n] = e$i[$k]
               }
               set xx = 0.5*(xa+xb) if (nn)
               set xea = abs(0.5*(xb-xa)) if (nn)
               set xeb = xea
               set xea[0] = 100
               set yy = yy if (nn)
               set ee = ee if (nn)
	       if ($haserr$i) { error_y xx yy ee
               } else { ptype 1 1 }
               errorbar xx yy xeb 1
               errorbar xx yy xea 3
  	       points xx yy
             } 
	     if ($hasm$i) { 
		if (!$haserr$i) { set m$i = y$i }
                echo $j
  	        ltype $($j-3)
		set xm = $xl,$xh,$(($xh-$xl)/(3.*dimen(x$i)))
		#spline x$i m$i xm ym
	        #ltype $($i == 1 ? 0 : $i)
		#connect xm ym
                ctype red
   		connect x$i m$i
                ctype default
                if ($hasmm$i) { 
                   connect x$i mm$i 
                   set yyp = reverse(mm$i)
                   set xxx = reverse(x$i)
                   set xxxx = x$i concat xxx
                   set yyyy = m$i concat yyp
                   shade $(($i-$start)*500+100) xxxx yyyy
                }
  	        ltype 0
	    }
         }
      }

      if ($?dops) { quit }
